Best Practices
--------------
namespace::autoclean

Template searching
------------------
- Standard templates in Jet with File::ShareDir
- Set path as e.g. Text::Xslate->new( path => \@path );
- Should probably be by type in config file
  template
    html
      path
      suffix


Stash
-----
- node
  - row
  - basetype

Relations
---------
$node->descendants							all descendants
$node->descendants('basetype')				all descendants with that basetype
$node->descendants([qw/type1 type2])		more basetypes
$node->descendants('basetype', $opt)		with options

Improvements for ->child(ren), parent(s)

$opt
	order_by
	limit
	offset

$node->descendants uses PostgreSQL's WITH RECURSIVE-construct or the node_path array (making use of the gin index)

There might be a case for choosing between returning Jet::Stuff::Result and an array of Jet::Node
Or refactor (and rename) Jet::Stuff::Result to return an array of Jet::Stuff::Row or Jet::Node;

Laziness
--------
Hopefully it will be possible to make relations "lazy", in the sense that they can gather more information before
actually being used. Examples

$node->parents('basetype')->descendants
$node->childen('basetype')->children('basetype')

Each can in effect be one sql select, offering vastly better performance

AAA
---
- Users, groups
- ACL handling

REST
----
- Process: ability to check or set context->rest->type
  Some processing depens on REST type

Search
------
- PostgreSQL FTS
  fts should be combinable with ACL for searching, so the search result should reflect the user's permissions
  samecase searches? (test necessesity)
- Checkbox for a column: "searchable"
  If checked, a fts column on the node is updated with this column's content.
- http://search.cpan.org/dist/Search-Tools/

Paging
------
- limit, offset
- CPAN module?
- http://wiki.postgresql.org/wiki/Count_estimate

Transactions
------------
- Specify a way to start / commit / abort transactions
  Perhaps just a transaction plugin

Caching
-------
- Mark page as cachable
  Render first time
  Get from cache and compare expiration time
- Mark recipe step as cacable
  cache => {name => 'foo', expiration => bar}

Jet Schema
----------
- basetype
  pathmatch - a regex to match the endpath (see Jet.pm)
  templatename - relative/absolute?
  response types we can/can't handle
  "traits" like menu, breadcrumbs for each REST type
- path
  Perhaps active flag, active period(s) - or publish time, expiration time
  Problem with this is to find out when to apply
  - For all children?
  - In all cases?
- node
  cache time (interval)
- update, delete data_view triggers
- Trash
  Some way to delete a tree by moving it to a "Trash" node.
  There could be more than one node with the same path part
- Recursion detection
  path1->path2->path3->path1 should be disallowed
  incl test
- Reintroduce the idea of "components" (or just separate recipe out)
  A basetype can have several paths
  A basetype can have several components
  A component can be active for one specific, more, or all REST types

Stuff class
------------
- delete, update

Result class
------------
- Row maker - insert column accessors
  Perhaps use cases from some other classses
  http://search.cpan.org/dist/Moose/lib/Moose/Meta/Class.pm
  Moose::Meta::Class->create or ->create_anon_class
  then $meta->add_attribute for each column
  then cache the result of that so you don't do it again next time you run the same query

Node class
----------
- children (etc)
  search can be optimized for the different scenarios
  right now there's a select for each child even when the search could be smarter

Plack
-----
- Authentication
  ACL for images still a problem
- Image handling
  http://search.cpan.org/dist/Plack-Middleware-Image-Scale/

Modules
-------
- Jet::Config -> Jet::Context::Config

File Upload
-----------
- Plack::Request::Upload
  path - temporary file
  content_type
  filename - original filename
  http://xquerywebappdev.wordpress.com/2010/05/21/drag-n-drop-from-desktop-jquery-plugin/

Plugins
-------
- Upload -> File::Upload
  Refactor hash directory handling
  Config option for base dir
- Admin
  Administration should just be another plugin
  Or perhaps a recipe with several plugins

Packages
--------
- plugins
  basetype definitions - including recipes
  roles/traits
  an installscript

Recipes
-------
- On startup, Look through all jet.basetypes and 'compile' the recipes
  require the plugin modules
  name the recipe
  cache the recipe in context->recipes
  A load or register method to init the plugin methods
- External help
  https://metacpan.org/module/PNI
  https://metacpan.org/module/Thorium

Data Repository
---------------
- Define Moose base types
  Perl/Moose <-> PostgreSQL mapping
  Data representation(s)
  - html pages
  - lists
  - etc
- Define nodes
  Add "fields" from base types
  DDL to create tables in the data schema
  DDL to add/update /delete columns when fields change
- Will make it possible/easier to make a row maker

Testing
-------
- Test database creation
  Use Family::Photo schema
- path creation
  move a node, see the path change ripple through the tree
  update/delete a leaf node, a stem node, a root node
- Coverage is low
- Coverate report
- POD coverage
- Test plugins 

Logging
-------

Statistics
----------

Exception handling
-------------------
- https://metacpan.org/release/HTTP-Exception
- https://metacpan.org/module/Plack::Middleware::HTTPExceptions

Devel mode
----------
- Optionally turn on/off some features when developing
  Text::Xslate cache
