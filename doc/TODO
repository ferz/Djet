Framework
---------
- Context
  https://metacpan.org/module/DBIx::Connector
  Context replacement
  - Split into server process information and per-request information.
    Process information
      schema, cache, 
    Per-request information
      rest, stash, node, recipe, response
      Perhaps subclass Plack::Request
- encoding
  https://metacpan.org/release/utf8-all
- Best Practices
  namespace::autoclean
  

Template
--------
- Searching
  Standard templates in Djet with File::ShareDir
  Set path as e.g. Text::Xslate->new( path => \@path );
  Should probably be by type in config file
  template
    html
      path
      suffix
- Javascript
  http://search.cpan.org/dist/HTML-JQuery/

Stash
-----
- node
  - row
  - basetype

Relations
---------
$node->descendants							all descendants
$node->descendants('basetype')				all descendants with that basetype
$node->descendants([qw/type1 type2])		more basetypes
$node->descendants('basetype', $opt)		with options

Improvements for ->child(ren), parent(s)

$opt
	order_by
	limit
	offset

$node->descendants uses PostgreSQL's WITH RECURSIVE-construct or the node_path array (making use of the gin index)

There might be a case for choosing between returning Djet::Stuff::Result and an array of Djet::Node
Or refactor (and rename) Djet::Stuff::Result to return an array of Djet::Stuff::Row or Djet::Node.
- Or perhaps just introduce a generic iterator to handle the results.

Laziness
--------
Hopefully it will be possible to make relations "lazy", in the sense that they can gather more information before
actually being used. Examples

$node->parents('basetype')->descendants
$node->childen('basetype')->children('basetype')

Each can in effect be one sql select, offering vastly better performance

Idea
----
- node->children, ->parents, etc returns a Djet::Node::Search object
- JNO also has ->children, ->parents, etc
- Building up a search parameter list on the way.
- Also has ->next, ->all
- Fires when ->next, ->all is called
- Returns node(s)
- Possibly has parameters to in/exclude nodes on the route


AAA
---
- Users, groups
- ACL handling

REST
----
- Process: ability to check or set context->rest->type
  Some processing depends on REST type

Search
------
- PostgreSQL FTS
  fts should be combinable with ACL for searching, so the search result should reflect the user's permissions
  samecase searches? (test necessesity)
- Checkbox for a column: "searchable"
  If checked, a fts column on the node is updated with this column's content.
- CPAN
  http://search.cpan.org/dist/Search-Tools/
  https://metacpan.org/release/Data-SearchEngine
  Write a specific Pg fts engine

Paging
------
- limit, offset
- CPAN module?
  Probably https://metacpan.org/module/Data::Paginator
- http://wiki.postgresql.org/wiki/Count_estimate

Transactions
------------
- Specify a way to start / commit / abort transactions
  Perhaps just a transaction plugin

Caching
-------
- Mark page as cachable
  Render first time
  Get from cache and compare expiration time
- Mark recipe step as cacable
  cache => {name => 'foo', expiration => bar}

Djet Schema
----------
- basetype
  pathmatch - a regex to match the endpath (see Djet.pm)
  templatename - relative/absolute?
  response types we can/can't handle
  "traits" like menu, breadcrumbs for each REST type
- path
  Perhaps active flag, active period(s) - or publish time, expiration time
  Problem with this is to find out when to apply
  - For all children?
  - In all cases?
- node
  cache time (interval)
- update, delete data_view triggers
- Trash
  Some way to delete a tree by moving it to a "Trash" node.
  There could be more than one node with the same path part
- Data node
  A set of typed arrays
  - int, text, datetime, timestamp, etc
  - a view that points to the array element
  - How about fts?
  - pros
    Easy to change a node's data definition.
    No data shuffling.
    Better performance for schema changes
  - cons
    One more level of indirection
    How to handle array of arrays
    Indexing made hard
  Or perhaps use hstore
- Recursion detection
  path1->path2->path3->path1 should be disallowed
  incl test

Stuff class
------------
- delete, update

Result class
------------
- Row maker - insert column accessors
  Perhaps use cases from some other classses
  http://search.cpan.org/dist/Moose/lib/Moose/Meta/Class.pm
  Moose::Meta::Class->create or ->create_anon_class
  then $meta->add_attribute for each column
  then cache the result of that so you don't do it again next time you run the same query

Node class
----------
- children (etc)
  search can be optimized for the different scenarios
  right now there's a select for each child even when the search could be smarter

Plack
-----
- Authentication
  ACL for images still a problem
- Image handling
  http://search.cpan.org/dist/Plack-Middleware-Image-Scale/

Plugins
-------
- Admin
  Administration should just be another plugin
  Or perhaps a recipe with several plugins
- File Upload
  See notes within about splitting out functionality
  Config option for base dir
  Refactor hash directory handling
  http://xquerywebappdev.wordpress.com/2010/05/21/drag-n-drop-from-desktop-jquery-plugin/
- Data validation
  https://metacpan.org/module/Data::FormValidator
  https://metacpan.org/module/FormValidator::Simple
  https://metacpan.org/module/FormValidator::Lite
  https://metacpan.org/module/Data::Verifier
  https://metacpan.org/module/Oogly
  https://metacpan.org/module/Validation::Class
- Blog
- Webshop
  https://metacpan.org/module/Nitesi
- Accounting
  http://search.cpan.org/dist/Ledger-Parser/

Packages
--------
- Reintroduce the idea of "components" (or just separate recipe out)
  A basetype can have several paths
  A basetype can have several components
  A component can be active for one specific, more, or all REST types
- plugins
  basetype definitions - including recipes
  roles/traits
  an installscript

Recipes
-------
- On startup, Look through all djet.basetypes and 'compile' the recipes
  require the plugin modules
  name the recipe
  cache the recipe in context->recipes
  A load or register method to init the plugin methods
- External help
  https://metacpan.org/module/PNI
  https://metacpan.org/module/Thorium

Data Repository
---------------
- Define Moose base types
  Perl/Moose <-> PostgreSQL mapping
  Data representation(s)
  - html pages
  - lists
  - etc
- Define nodes
  Add "fields" from base types
  DDL to create tables in the data schema
  DDL to add/update /delete columns when fields change
  https://metacpan.org/module/DBIx::RunSQL
- Will make it possible/easier to make a row maker

Testing
-------
- Test database creation
  Use Family::Photo schema
- CPAN
  https://metacpan.org/module/Test::Routine
- pgTAP
  http://pgtap.org/
- path creation
  move a node, see the path change ripple through the tree
  update/delete a leaf node, a stem node, a root node
- Coverage is low
- Test plugins 

Documentation
-------------
- Coverage report
- http://cloc.sourceforge.net/

Logging
-------

Statistics
----------

Exception handling
-------------------
- https://metacpan.org/release/HTTP-Exception
- https://metacpan.org/module/Plack::Middleware::HTTPExceptions

Devel mode
----------
- Optionally turn on/off some features when developing
  Text::Xslate cache

Config
------
1. Rework config handling 
2. Work stash into the module
3. Config file structure
   etc/djet.conf
   <client_dir>/etc/somethi≈Ñg
4. What overrides what?
5. module might be basenode instead?
6. recipe may be better in ;Stuff, where the current :Stuff stuff belongs in Djet ?
